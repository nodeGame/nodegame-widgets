{"name":"nodegame-widgets","tagline":"","body":"# nodegame-widgets\r\n\r\nCollections of useful and reusable javascript / HTML code snippets for nodegame-window.\r\n\r\n---\r\n\r\n## Usage: node.widgets.append\r\n\r\nLoading a widget from a nodeGame game is very easy:\r\n\r\n```js\r\n\r\n\tvar options = {};\r\n\tvar root = W.getElementById('myRoot');\r\n\r\n\tvar wall = node.widgets.append('Wall', root, options);\r\n\r\n\t// or\r\n\r\n\tvar wall = node.widgets.get('Wall', options);\r\n\r\n\t// some operations\r\n\r\n\twall.append(root);\r\n\r\n\t// or\r\n\r\n\tvar myCustomWidget = new myCustomWidgets(options);\r\n\tnode.widgets.append(myCustomWidget, root);\r\n\r\n```\r\n\r\n### First parameter: Widget object or string\r\n\r\nThis can be either a string representation of one the widgets objects already inside the node.widgets.widgets collections or a new object. In the latter case, the widget is added to the collection (if valid).\r\n\r\n### Second parameter: Root element\r\n\r\nThis parameter is later passed to the ```append``` method of the widget. If no root element was specified, a root is automatically determined through ```node.window.getScreen```. This parameter is obviously absent in ```node.widgets.getWidget```.\r\n\r\n### Third parameter: Options\r\n\r\nThis parameter is optional and its properties vary from widget to widget. Some are widget-independent.\r\n\r\nThe same fieldset object in the example above can also be passed as one of the properties of the ```options``` object in the ```node.widgets.append``` method. In this case, the latter has highest priority, and can override the fieldset settings of the constructor.\r\n\r\n```js\r\n\tvar wall = node.widgets.append('Wall', root_element, {fieldset: false});\r\n```\r\n\r\n#### On event property\r\n\r\nA standard javascript event listener ('onclick', 'onfocus', 'onblur', 'onchange', 'onsubmit', 'onload', 'onunload', and 'onmouseover') can be passed as parameter and it is added to the root element of the widget.\r\n\r\n```js\r\n\t\tvar options = {\r\n\t\t\tonclick: function () {\r\n\t\t\t\t// do something\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n```\r\n\r\n\r\n## Anatomy of node.widgets.append\r\n\r\nEach time ```node.widgets.append``` is executed the following operations are performed:\r\n\r\n1. Detect whether it is a string or an object\r\n2. Load it from the collection if it is a string\r\n3. Add it to the collection if it is an object\r\n4. Call the ```init``` method\r\n5. Call the ```append``` method\r\n6. Call the ```listeners``` method (if any)\r\n7. Return a reference to the widget object\r\n\r\n## How to write a nodeGame widget\r\n\r\nIn order to preserve encapsulation, a widget should always be wrapped in a self-executing function.\r\n\r\n```js\r\n\t(function (exports) {\r\n\r\n\t  // register a widget to the global collection\r\n\t\tnode.widgets.register('myWidget', myWidget);\r\n\r\n\t\tfunction myWidget (options) {\r\n\t  \t\t// init\r\n\t\t}\r\n\r\n\t\t// More code here\r\n\r\n\t})();\r\n```\r\n\r\nWidgets must define a number of constants describing their expected behavior, version, dependencies and so on.\r\n\r\n\r\n```js\r\n\r\n\t// Encapsulated\r\n\r\n\tmyWidget.defaults = {};\r\n\tmyWidget.defaults.id = 'myWidget';\r\n\r\n\tmyWidget.defaults.fieldset = {\r\n    legend: 'Foo',\r\n    id: 'foo_fieldset',\r\n  };\r\n\r\n\tmyWidget.name = 'my cool Widget';\r\n\tmyWidget.version = '0.3';\r\n\tmyWidget.description = 'This widget does cool stuff';\r\n\r\n\tmyWidget.dependencies = {\r\n\t\tJSUS: {}\r\n\t};\r\n\r\n\tfunction myWidget (options) {\r\n\t\t// init\r\n\t}\r\n\r\n\t// More code here\r\n```\r\n\r\nThere is a set of methods that a widget *must* implement:\r\n\r\n|  **Method**  | **Meaning**                                                                                                                           |\r\n| -------------| --------------------------------------------------------------------------------------------------------------------------------------|\r\n| init         | Initialize the widget object, after the constructor has been called. This method is called everytime a widget needs to be restarted.  |\r\n| append       | Append the widget to a root element and returns it.                                                                                   |\r\n| getRoot      | Returns a pointer to the HTML root element. This is generally the element which gets highlighted if an error occurs.                  |\r\n\r\n\r\nSome others are *optional*, and nodeGame adds them, if they are missing.\r\n\r\n|  **Method**  | **Meaning**                                                                       |\r\n| -------------| ----------------------------------------------------------------------------------|\r\n| listeners    | Define a battery of nodeGame event listeners. This method is called only once.    |\r\n| getAllValues | If the widgets is storing values, this method is suppose to return them all.      |\r\n| highlight    | Highlight the widget in response to particular events.                            |\r\n\r\n\r\n## Build\r\n\r\nYou can create a custom nodegame-window build using the make.js file in the bin directory.\r\n\r\n```javascript\r\nnode make.js build -a // Full build, about 43Kb minified\r\nnode make.js build -w msgbar,visualstate -o mywidgets.js // about 4Kb minified\r\n```\r\n\r\n## Make help\r\n\r\n  Usage: make.js [options] [command]\r\n\r\n  Commands:\r\n\r\n    clean\r\n    Removes all files from build folder\r\n\r\n    build [options] [options]\r\n    Creates a custom build of nodegame-widgets.js\r\n\r\n  Options:\r\n\r\n    -h, --help     output usage information\r\n    -V, --version  output the version number\r\n\r\n  Usage: build [options] [options]\r\n\r\n  Options:\r\n\r\n    -h, --help           output usage information\r\n    -l, --lib <items>    choose libraries to include\r\n    -A, --analyse        analyse build\r\n    -a, --all            full build of JSUS\r\n    -o, --output <file>\r\n\r\n## License\r\n\r\nCopyright (C) 2014 Stefano Balietti\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}